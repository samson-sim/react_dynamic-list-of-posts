{"version":3,"sources":["components/PostsList/PostsList.tsx","api/comments.ts","api/posts.ts","components/NewCommentForm/NewCommentForm.tsx","components/PostDetails/PostDetails.tsx","App.tsx","index.tsx"],"names":["PostsList","posts","setSelectedPostId","selectedPostId","className","map","post","userId","title","id","onClick","type","deleteComment","fetch","method","then","response","ok","Error","json","createComment","postId","name","email","body","a","headers","JSON","stringify","getPosts","url","NewCommentForm","getPostComments","useState","setBody","setName","setEmail","createCommentForPost","event","preventDefault","onSubmit","placeholder","value","onChange","target","required","PostDetails","selectedPost","setSelectedPost","commentsOfPost","setComments","isCommentsHidden","setIsCommentsHidden","changeSelectedPost","changedSelectedPost","comments","removeComment","useEffect","length","comment","App","setPosts","selectedUserId","setSelectedUserId","users","setUsers","loadPosts","loadedPosts","loadUsers","loadedUsers","htmlFor","user","username","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e723b7e6.chunk.js","sourcesContent":["import React from 'react';\nimport { Post } from '../../types/Post';\nimport './PostsList.scss';\n\ntype Props = {\n  posts: Post[],\n  setSelectedPostId: (id: number) => void,\n  selectedPostId: number,\n};\n\nexport const PostsList: React.FC<Props> = ({ posts, setSelectedPostId, selectedPostId }) => (\n  <div className=\"PostsList\">\n    <h2>Posts:</h2>\n\n    <ul className=\"PostsList__list\">\n      {posts.map(post => (\n        <li key={post.id} className=\"PostsList__item\">\n          <div>\n            <b>{`User #${post.userId}:`}</b>\n            {post.title}\n          </div>\n          {selectedPostId === post.id ? (\n            <button\n              onClick={() => setSelectedPostId(0)}\n              type=\"button\"\n              className=\"PostsList__button button\"\n            >\n              Close\n            </button>\n          )\n            : (\n              <button\n                onClick={() => setSelectedPostId(post.id)}\n                type=\"button\"\n                className=\"PostsList__button button\"\n              >\n                Open\n              </button>\n            )}\n        </li>\n      ))}\n    </ul>\n  </div>\n);\n","/* eslint-disable @typescript-eslint/quotes */\nimport { Comment } from '../types/Comment';\n\nexport function getCommentsOfPost(id: number): Promise<Comment[]> {\n  return fetch(`https://mate.academy/students-api/comments?postId=${id}`)\n    .then(response => {\n      if (!response.ok) {\n        throw new Error('error');\n      }\n\n      return response.json();\n    });\n}\n\nexport function deleteComment(id: number): Promise<Comment> {\n  return fetch(`https://mate.academy/students-api/comments/${id}`, { method: 'DELETE' })\n    .then(response => {\n      if (!response.ok) {\n        throw new Error('error');\n      }\n\n      return response.json();\n    });\n}\n\nexport async function createComment(\n  postId: number,\n  name: string,\n  email: string,\n  body: string,\n): Promise<Comment> {\n  const response = await fetch('https://mate.academy/students-api/comments/', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({\n      postId,\n      name,\n      email,\n      body,\n    }),\n  });\n\n  return response.json();\n}\n","import { Post } from '../types/Post';\nimport { User } from '../types/User';\n\nexport async function getPosts(userId: number): Promise<Post[]> {\n  let url = 'https://mate.academy/students-api/posts';\n\n  if (userId) {\n    url += `?userId=${userId}`;\n  }\n\n  const response = await fetch(url);\n\n  return response.json();\n}\n\nexport function getSelectedPost(id: number): Promise<Post> {\n  return fetch(`https://mate.academy/students-api/posts/${id}`)\n    .then(response => {\n      if (!response.ok) {\n        throw new Error('error');\n      }\n\n      return response.json();\n    });\n}\n\nexport function getUsers(): Promise<User[]> {\n  return fetch('https://mate.academy/students-api/users/')\n    .then(response => {\n      if (!response.ok) {\n        throw new Error('error');\n      }\n\n      return response.json();\n    });\n}\n","import React, { useState } from 'react';\nimport { createComment } from '../../api/comments';\nimport './NewCommentForm.scss';\n\ntype Props = {\n  getPostComments: () => void;\n  postId: number;\n};\n\nexport const NewCommentForm: React.FC<Props> = ({ getPostComments, postId }) => {\n  const [body, setBody] = useState('');\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n\n  const createCommentForPost = async (event: React.FormEvent) => {\n    event.preventDefault();\n    await createComment(postId, name, email, body);\n    getPostComments();\n    setBody('');\n    setEmail('');\n    setName('');\n  };\n\n  return (\n    <form\n      onSubmit={createCommentForPost}\n      className=\"NewCommentForm\"\n    >\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          value={name}\n          onChange={(event) => {\n            setName(event.target.value);\n          }}\n          required\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          value={email}\n          onChange={(event) => {\n            setEmail(event.target.value);\n          }}\n          required\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          value={body}\n          onChange={(event) => {\n            setBody(event.target.value);\n          }}\n          required\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { getCommentsOfPost, deleteComment } from '../../api/comments';\nimport { getSelectedPost } from '../../api/posts';\nimport { Post } from '../../types/Post';\nimport { Comment } from '../../types/Comment';\nimport { NewCommentForm } from '../NewCommentForm';\nimport './PostDetails.scss';\n\ntype Props = {\n  selectedPostId: number,\n};\n\nexport const PostDetails: React.FC<Props> = ({ selectedPostId }) => {\n  const [selectedPost, setSelectedPost] = useState<Post>({\n    id: 0,\n    userId: 0,\n    title: '',\n    body: '',\n  });\n\n  const [commentsOfPost, setComments] = useState<Comment[]>([{\n    id: 0,\n    postId: 0,\n    name: '',\n    email: '',\n    body: '',\n  }]);\n\n  const [isCommentsHidden, setIsCommentsHidden] = useState(false);\n\n  const changeSelectedPost = async () => {\n    const changedSelectedPost = await getSelectedPost(selectedPostId);\n\n    setSelectedPost(changedSelectedPost);\n  };\n\n  const getPostComments = async () => {\n    const comments = await getCommentsOfPost(selectedPostId);\n\n    setComments(comments);\n  };\n\n  const removeComment = async (id: number) => {\n    await deleteComment(id);\n\n    await getPostComments();\n  };\n\n  useEffect(() => {\n    getPostComments();\n    changeSelectedPost();\n  }, [selectedPostId]);\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n\n      <section className=\"PostDetails__post\">\n        <p>{selectedPost.title}</p>\n      </section>\n\n      <section className=\"PostDetails__comments\">\n        {commentsOfPost.length\n          && (\n            <button\n              type=\"button\"\n              className=\"button\"\n              onClick={() => setIsCommentsHidden(!isCommentsHidden)}\n            >\n              {!isCommentsHidden ? `Hide ${commentsOfPost.length} comments` : 'Show comments'}\n            </button>\n          )}\n\n        {!isCommentsHidden && (\n          <ul className=\"PostDetails__list\">\n            {commentsOfPost.map(comment => (\n              <li key={comment.id} className=\"PostDetails__list-item\">\n                <button\n                  type=\"button\"\n                  className=\"PostDetails__remove-button button\"\n                  onClick={() => {\n                    removeComment(comment.id);\n                  }}\n                >\n                  X\n                </button>\n                <p>{comment.body}</p>\n              </li>\n            ))}\n          </ul>\n        )}\n      </section>\n\n      <section>\n        <div className=\"PostDetails__form-wrapper\">\n          <NewCommentForm\n            getPostComments={getPostComments}\n            postId={selectedPostId}\n          />\n        </div>\n      </section>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { getPosts, getUsers } from './api/posts';\nimport { User } from './types/User';\nimport { Post } from './types/Post';\n\nconst App: React.FC = () => {\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [selectedUserId, setSelectedUserId] = useState<number>(0);\n  const [users, setUsers] = useState<User[]>([]);\n  const [selectedPostId, setSelectedPostId] = useState<number>(0);\n\n  const loadPosts = async () => {\n    const loadedPosts = await getPosts(selectedUserId);\n\n    setPosts(loadedPosts);\n  };\n\n  const loadUsers = async () => {\n    const loadedUsers = await getUsers();\n\n    setUsers(loadedUsers);\n  };\n\n  useEffect(() => {\n    loadUsers();\n  }, []);\n\n  useEffect(() => {\n    loadPosts();\n  }, [selectedUserId]);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label htmlFor=\"select\">\n          Select a user: &nbsp;\n\n          <select\n            id=\"select\"\n            className=\"App__user-selector\"\n            onChange={(event) => {\n              setSelectedUserId(+event.target.value);\n            }}\n          >\n            <option value=\"\">All users</option>\n            {users.map(user => (\n              <option key={user.id} value={user.id}>{`${user.name} ${user.username}`}</option>\n            ))}\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            posts={posts}\n            setSelectedPostId={setSelectedPostId}\n            selectedPostId={selectedPostId}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          {selectedPostId !== 0 && (\n            <PostDetails selectedPostId={selectedPostId} />\n          )}\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}